Problem statement
You are given the head node of a singly linked list 'head'. Your task is to modify the linked list in such a way that 
all the even valued nodes appear before the all odd valued node and order of nodes remain the same.

Sample Input 1
2 1 3 5 6 4 7 -1
Sample Output 1
2 6 4 1 3 5 7

Node* segregateEvenOdd(Node* head)

{
    Node* dummy1 = new Node(0);
    Node* dummy2 = new Node(0);
    Node* even = dummy1;
    Node* odd = dummy2;
    Node* temp = head;

    while(temp){
        if(temp->data%2 == 0){
            even->next = temp;
            even = even->next;
        }
        else {
            odd->next = temp;
            odd = odd->next;
        }
        temp = temp->next;
    }
    even->next = dummy2->next;
    odd->next = NULL;
    return dummy1->next;
}

Two dummy nodes, dummy1 and dummy2, are created to maintain two separate linked lists: one for even nodes and one for odd nodes.

Pointers even and odd are initialized to the respective dummy nodes.

A temporary pointer temp is initialized to the head of the original linked list.

A while loop is used to iterate through the original linked list:

If the data of the current node (pointed to by temp) is even, it is appended to the "even" list.
If the data is odd, it is appended to the "odd" list.
After the loop, the last node of the "even" list is connected to the first node of the "odd" list.

The next pointer of the last node in the "odd" list is set to NULL to terminate the new linked list.

Finally, the function returns the next pointer of dummy1, which points to the head of the new segregated linked list.
